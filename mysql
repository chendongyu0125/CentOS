


mysql -u root -p

set global net_buffer_length=1000000; --Set network buffer length to a large byte number

set global max_allowed_packet=1000000000; --Set maximum allowed packet size to a large byte number

SET foreign_key_checks = 0; --Disable foreign key checking to avoid delays,errors and unwanted behaviour

source file.sql --Import your sql dump file





mason19941215
Bbs1	
不建议将表分开导入，可以开启mysql的非严格模式！set sql_mode="STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION";这样mysql就不会报错了！



服务器意外断电后启动mysql数据库报错：

Another MySQL daemon already running withthe same unix socket.



本地登录mysql数据库提示：

ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (111)

原因：

mysql没有正常停止，机器重启后mysql.sock一直存在，但机器重启后mysql实际上为启动的，

所以呢需要把/var/lib/mysql 下的mysql.sock文件给删掉，然后就可以启动了
————————————————
版权声明：本文为CSDN博主「小小程序员1986」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/jethai/article/details/52345231











mysql断电后无法重启：删除/var/lib/mysql/目录下的所有文件，然后重启。

把别处的数据文件拷贝到/var/lib/mysql目录下，可能存在没有访问权限的问题，解决方法如下：
（1）把数据文件的用户及所在的组改为mysql
（2）把数据文件的读取权限改为660 （-rw-rw----）
(3) 把数据文件所在的文件夹的用户及所在组改为mysql
（4）把数据文件所在的文件夹的权限改为700（-rwx------）
(5)修改防火墙设置
chown -R mysql:mysql /var/lib/mysql/dbname
chmod -R 660 /var/lib/mysql/dbname
chown mysql:mysql /var/lib/mysql/dbname
chmod 700 /var/lib/mysql/dbname
chcon -R  -t mysqld_db_t /var/lib/mysql/dbname/*

以下是参考文档：
This is an old topic, but I didn't find anything that worked for me so for anyone running into the same problem, yet the above file permission suggestions still don't change the "Can't find file" errors, here's what worked for me and my particular issue.

I was doing a rescue from one CentOS server to another using a recovery image, which had a different OS than the original OS and the original filesystem was mounted on a temporary dir. While I had access to the original /var/lib/mysql files, I didn't have access to the mysql admin or dump utilities, which requires the server to be running anyway (it's not automatically included when doing a recovery from a read-only image). Backups were a week old and I wanted to see if I could get the most recent data possible.

Changing the standard file permissions on these still kept giving "Can't find file" for nearly all of the database tables, however I could see that the tables were there. Turns out it was related to SELinux context on the files I had moved over using rysnc. All of the rescued dirs and files looked like this:

$ ls -alZ
drwx------. mysql mysql unconfined_u:object_r:admin_home_t:s0 somedb_dev
drwx------. mysql mysql unconfined_u:object_r:admin_home_t:s0 somedb_local
drwx------. mysql mysql unconfined_u:object_r:admin_home_t:s0 somedb_production
drwx------. mysql mysql unconfined_u:object_r:admin_home_t:s0 somedb_staging
The -Z flag notes the security context of files and dirs. Notice the unconfined_u and admin_home_t context. These are different from what they should be:

drwx------. mysql mysql system_u:object_r:mysqld_db_t:s0 mysql
Changing these database files to the proper context solved the problem and gave proper access to mysqld using the chcon command:

$ chcon -R -u system_u -t mysqld_db_t somedb_*
This changed all my custom databases to the proper SELinux context and the files could now be recognized by mysqld. I recommend running the chcon commad while the database server is not active, just as a precaution.

Hope that helps someone running into the same problem I had! Of course, you can turn off SELinux temporarily to test if this is fact this issue, but I didn't want turning off SELinux as a permanent solution.


上传大文档失败的问题；

show variables like '%max%';
set global max_allowed_packet=166666m;


max_allowed_packet=166666m 这个是限制文件大小的由于要上传6个G所以改成1111111M 额应该够了吧 
wait_timeout=288000000 等待超时。。看事改吧，我在后面加了好几个0.。。 
interactive_timeout= 288000000运行超时。。。。看事改吧，我在后面加了好几个0.。。 

————————————————
版权声明：本文为CSDN博主「codeing_doc」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/u010391342/article/details/78767972
